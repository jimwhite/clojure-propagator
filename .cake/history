(use 'example.vl)
(use 'example.vl.goo)
(use 'example.vl.goo)
(graph-of-class "java.lang.String")
(use 'vl.sheet)
(def sheet (open-frame (graph-for-class "java.lang.String")))
(def sheet (open-frame (graph-of-class "java.lang.String")))
sheet
(use [vl shape sheet graph sample)
(use [vl shape sheet graph sample])
(use [vl.shape vl.sheet])
(use 'vl.shape)
(use '(vl shape sheet graph sample) '(clojure.contrib graph))
(def gr (ref (make-sample-graph)))
(sample-nodes)
(use 'vl.sample)
(use 'vl.sample)
(use 'example.vl.sample)
(use 'example.vl.sample)
(doc directed-graph)
(use 'example.vl.sample)
(use 'example.vl.sample)
(use 'example.vl.sample)
(use 'example.vl.sample)
(use '(vl shape sheet graph) 'example.vl.sample)
(def gr (ref (make-sample-graph)))
(def gr (ref (make-sample-graph)))
(use :reload-all '(vl shape sheet graph) 'example.vl.sample)
(def gr (ref (make-sample-graph)))
(def sheet (open-frame gr))
(make-sample-graph)
@gr
(use :reload-all '(vl shape sheet graph) 'example.vl.sample)
(def sheet (open-frame gr))
(def sheet (open-frame gr))
(use :reload 'vl.sheet)
(def sheet (open-frame gr))
(use :reload 'vl.sheet)
(def sheet (open-frame gr))
(doc do-swing)
(use 'clojure.contrib.swing-utils)
(doc do-swing)
(doc sheet-frame)
gr
@gr
(use :reload 'vl.sheet)
(def sheet (open-frame gr))
(use :reload 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all '(vl shape sheet graph) 'example.vl.sample)
(def gr (ref (make-sample-graph)))
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
sheet
(.getChildren @sheet)
@sheet
(class @sheet)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(class sheet)
(.isVisible sheet)
(.setVisible sheet)
(.setVisible sheet true)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(class sheet)
(.isVisible sheet)
(do-swing (.setVisible frame true))
(use 'clojure.contrib.swing-utils)
(do-swing (.setVisible frame true))
(do-swing (.setVisible sheet true))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(class sheet)
(.getChildren sheet)
(use 'clojure.contrib.repl-utils)
(show sheet)
(require '[clojure.contrib.repl-utils :as ru])
(ru/show sheet)
(.getComponents sheet)
(count (.getComponents sheet))
(vec (.getComponents sheet))
(def root (.getComponent sheet 0))
root
(.getChildren root)
(.getComponents root)
(.getComponentCount root)
(vec (.getComponents root))
(.getContentPane sheet)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(.getLayout (.getContentPane sheet))
(.setLayout sheet (BorderLayout.))
(import javax.swing.BorderLayout)
(import java.awt.BorderLayout)
(.setLayout sheet (BorderLayout.))
(make-sample-graph)
(get-nodes *1)
(doc doseq)
(doc get-neighbors)
(def gr (make-sample-graph))
(:nodes gr)
(def n (nth gr 3) )
(count (:nodes gr))
(keys (:nodes gr))
(class (:nodes gr))
(nth (:nodes gr) 3)
(def n *1)
(get-neighbors gr n)
(doc sample-node-connections)
(doc get-neighbors)
(source get-neighbors)
(:neighbors gr)
(source (:neighbors gr))
(source get-nodes)
(use '(vl shape sheet graph) 'example.vl.sample)
(use :reload-all '(vl shape sheet graph) 'example.vl.sample)
(use '(vl shape sheet graph) 'example.vl.sample)
(def sheet (open-frame (make-sample-graph)))
(def gr (ref (make-sample-graph)))
(def sheet (open-frame gr))
(get-neighbors @gr (first (get-nodes @gr)))
(first (get-nodes @gr))
(get-neighbors @gr (second (get-nodes @gr)))
(def sheet (open-frame gr))
(doc proxy)
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
(use :reload-all 'vl.sheet)
(def sheet (open-frame gr))
